// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mock_usecase/mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	io "io"
	url "net/url"
	reflect "reflect"

	uuid "github.com/google/uuid"
	entity "github.com/walnuts1018/mucaron/backend/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockEntityRepository is a mock of EntityRepository interface.
type MockEntityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEntityRepositoryMockRecorder
	isgomock struct{}
}

// MockEntityRepositoryMockRecorder is the mock recorder for MockEntityRepository.
type MockEntityRepositoryMockRecorder struct {
	mock *MockEntityRepository
}

// NewMockEntityRepository creates a new mock instance.
func NewMockEntityRepository(ctrl *gomock.Controller) *MockEntityRepository {
	mock := &MockEntityRepository{ctrl: ctrl}
	mock.recorder = &MockEntityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityRepository) EXPECT() *MockEntityRepositoryMockRecorder {
	return m.recorder
}

// CreateAlbum mocks base method.
func (m *MockEntityRepository) CreateAlbum(ctx context.Context, a entity.Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlbum", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAlbum indicates an expected call of CreateAlbum.
func (mr *MockEntityRepositoryMockRecorder) CreateAlbum(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlbum", reflect.TypeOf((*MockEntityRepository)(nil).CreateAlbum), ctx, a)
}

// CreateArtist mocks base method.
func (m *MockEntityRepository) CreateArtist(ctx context.Context, a entity.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArtist", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateArtist indicates an expected call of CreateArtist.
func (mr *MockEntityRepositoryMockRecorder) CreateArtist(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArtist", reflect.TypeOf((*MockEntityRepository)(nil).CreateArtist), ctx, a)
}

// CreateGenre mocks base method.
func (m *MockEntityRepository) CreateGenre(ctx context.Context, g entity.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenre", ctx, g)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGenre indicates an expected call of CreateGenre.
func (mr *MockEntityRepositoryMockRecorder) CreateGenre(ctx, g any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockEntityRepository)(nil).CreateGenre), ctx, g)
}

// CreateMusic mocks base method.
func (m_2 *MockEntityRepository) CreateMusic(ctx context.Context, m entity.Music) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateMusic", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMusic indicates an expected call of CreateMusic.
func (mr *MockEntityRepositoryMockRecorder) CreateMusic(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMusic", reflect.TypeOf((*MockEntityRepository)(nil).CreateMusic), ctx, m)
}

// CreateUser mocks base method.
func (m *MockEntityRepository) CreateUser(ctx context.Context, u entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockEntityRepositoryMockRecorder) CreateUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockEntityRepository)(nil).CreateUser), ctx, u)
}

// DeleteAlbums mocks base method.
func (m *MockEntityRepository) DeleteAlbums(ctx context.Context, a []entity.Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlbums", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlbums indicates an expected call of DeleteAlbums.
func (mr *MockEntityRepositoryMockRecorder) DeleteAlbums(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlbums", reflect.TypeOf((*MockEntityRepository)(nil).DeleteAlbums), ctx, a)
}

// DeleteArtist mocks base method.
func (m *MockEntityRepository) DeleteArtist(ctx context.Context, a entity.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtist", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtist indicates an expected call of DeleteArtist.
func (mr *MockEntityRepositoryMockRecorder) DeleteArtist(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtist", reflect.TypeOf((*MockEntityRepository)(nil).DeleteArtist), ctx, a)
}

// DeleteGenre mocks base method.
func (m *MockEntityRepository) DeleteGenre(ctx context.Context, g entity.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGenre", ctx, g)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGenre indicates an expected call of DeleteGenre.
func (mr *MockEntityRepositoryMockRecorder) DeleteGenre(ctx, g any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGenre", reflect.TypeOf((*MockEntityRepository)(nil).DeleteGenre), ctx, g)
}

// DeleteMusics mocks base method.
func (m *MockEntityRepository) DeleteMusics(ctx context.Context, musicIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMusics", ctx, musicIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMusics indicates an expected call of DeleteMusics.
func (mr *MockEntityRepositoryMockRecorder) DeleteMusics(ctx, musicIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMusics", reflect.TypeOf((*MockEntityRepository)(nil).DeleteMusics), ctx, musicIDs)
}

// DeleteUser mocks base method.
func (m *MockEntityRepository) DeleteUser(ctx context.Context, u entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockEntityRepositoryMockRecorder) DeleteUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockEntityRepository)(nil).DeleteUser), ctx, u)
}

// GetAlbumByID mocks base method.
func (m *MockEntityRepository) GetAlbumByID(ctx context.Context, id uuid.UUID) (entity.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumByID", ctx, id)
	ret0, _ := ret[0].(entity.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumByID indicates an expected call of GetAlbumByID.
func (mr *MockEntityRepositoryMockRecorder) GetAlbumByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumByID", reflect.TypeOf((*MockEntityRepository)(nil).GetAlbumByID), ctx, id)
}

// GetAlbumByIDs mocks base method.
func (m *MockEntityRepository) GetAlbumByIDs(ctx context.Context, ids []uuid.UUID) ([]entity.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumByIDs", ctx, ids)
	ret0, _ := ret[0].([]entity.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumByIDs indicates an expected call of GetAlbumByIDs.
func (mr *MockEntityRepositoryMockRecorder) GetAlbumByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumByIDs", reflect.TypeOf((*MockEntityRepository)(nil).GetAlbumByIDs), ctx, ids)
}

// GetAlbumsByNameAndArtist mocks base method.
func (m *MockEntityRepository) GetAlbumsByNameAndArtist(ctx context.Context, ownerID uuid.UUID, albumName string, artist entity.Artist) ([]entity.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumsByNameAndArtist", ctx, ownerID, albumName, artist)
	ret0, _ := ret[0].([]entity.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsByNameAndArtist indicates an expected call of GetAlbumsByNameAndArtist.
func (mr *MockEntityRepositoryMockRecorder) GetAlbumsByNameAndArtist(ctx, ownerID, albumName, artist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsByNameAndArtist", reflect.TypeOf((*MockEntityRepository)(nil).GetAlbumsByNameAndArtist), ctx, ownerID, albumName, artist)
}

// GetArtistByID mocks base method.
func (m *MockEntityRepository) GetArtistByID(ctx context.Context, id uuid.UUID) (entity.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByID", ctx, id)
	ret0, _ := ret[0].(entity.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByID indicates an expected call of GetArtistByID.
func (mr *MockEntityRepositoryMockRecorder) GetArtistByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByID", reflect.TypeOf((*MockEntityRepository)(nil).GetArtistByID), ctx, id)
}

// GetArtistByIDs mocks base method.
func (m *MockEntityRepository) GetArtistByIDs(ctx context.Context, ids []uuid.UUID) ([]entity.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByIDs", ctx, ids)
	ret0, _ := ret[0].([]entity.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByIDs indicates an expected call of GetArtistByIDs.
func (mr *MockEntityRepositoryMockRecorder) GetArtistByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByIDs", reflect.TypeOf((*MockEntityRepository)(nil).GetArtistByIDs), ctx, ids)
}

// GetArtistByName mocks base method.
func (m *MockEntityRepository) GetArtistByName(ctx context.Context, ownerID uuid.UUID, name string) (entity.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByName", ctx, ownerID, name)
	ret0, _ := ret[0].(entity.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByName indicates an expected call of GetArtistByName.
func (mr *MockEntityRepositoryMockRecorder) GetArtistByName(ctx, ownerID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByName", reflect.TypeOf((*MockEntityRepository)(nil).GetArtistByName), ctx, ownerID, name)
}

// GetGenreByID mocks base method.
func (m *MockEntityRepository) GetGenreByID(ctx context.Context, id uuid.UUID) (entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenreByID", ctx, id)
	ret0, _ := ret[0].(entity.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenreByID indicates an expected call of GetGenreByID.
func (mr *MockEntityRepositoryMockRecorder) GetGenreByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenreByID", reflect.TypeOf((*MockEntityRepository)(nil).GetGenreByID), ctx, id)
}

// GetGenreByIDs mocks base method.
func (m *MockEntityRepository) GetGenreByIDs(ctx context.Context, ids []uuid.UUID) ([]entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenreByIDs", ctx, ids)
	ret0, _ := ret[0].([]entity.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenreByIDs indicates an expected call of GetGenreByIDs.
func (mr *MockEntityRepositoryMockRecorder) GetGenreByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenreByIDs", reflect.TypeOf((*MockEntityRepository)(nil).GetGenreByIDs), ctx, ids)
}

// GetGenreByName mocks base method.
func (m *MockEntityRepository) GetGenreByName(ctx context.Context, ownerID uuid.UUID, name string) (entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenreByName", ctx, ownerID, name)
	ret0, _ := ret[0].(entity.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenreByName indicates an expected call of GetGenreByName.
func (mr *MockEntityRepositoryMockRecorder) GetGenreByName(ctx, ownerID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenreByName", reflect.TypeOf((*MockEntityRepository)(nil).GetGenreByName), ctx, ownerID, name)
}

// GetMusicByFileHash mocks base method.
func (m_2 *MockEntityRepository) GetMusicByFileHash(ctx context.Context, userID uuid.UUID, fileHash string, m *entity.Music) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GetMusicByFileHash", ctx, userID, fileHash, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMusicByFileHash indicates an expected call of GetMusicByFileHash.
func (mr *MockEntityRepositoryMockRecorder) GetMusicByFileHash(ctx, userID, fileHash, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicByFileHash", reflect.TypeOf((*MockEntityRepository)(nil).GetMusicByFileHash), ctx, userID, fileHash, m)
}

// GetMusicByID mocks base method.
func (m *MockEntityRepository) GetMusicByID(ctx context.Context, id uuid.UUID) (entity.Music, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicByID", ctx, id)
	ret0, _ := ret[0].(entity.Music)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicByID indicates an expected call of GetMusicByID.
func (mr *MockEntityRepositoryMockRecorder) GetMusicByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicByID", reflect.TypeOf((*MockEntityRepository)(nil).GetMusicByID), ctx, id)
}

// GetMusicByIDs mocks base method.
func (m *MockEntityRepository) GetMusicByIDs(ctx context.Context, ids []uuid.UUID) ([]entity.Music, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicByIDs", ctx, ids)
	ret0, _ := ret[0].([]entity.Music)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicByIDs indicates an expected call of GetMusicByIDs.
func (mr *MockEntityRepositoryMockRecorder) GetMusicByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicByIDs", reflect.TypeOf((*MockEntityRepository)(nil).GetMusicByIDs), ctx, ids)
}

// GetMusicIDsByUserID mocks base method.
func (m *MockEntityRepository) GetMusicIDsByUserID(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicIDsByUserID", ctx, userID)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicIDsByUserID indicates an expected call of GetMusicIDsByUserID.
func (mr *MockEntityRepositoryMockRecorder) GetMusicIDsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicIDsByUserID", reflect.TypeOf((*MockEntityRepository)(nil).GetMusicIDsByUserID), ctx, userID)
}

// GetMusicsByUserID mocks base method.
func (m *MockEntityRepository) GetMusicsByUserID(ctx context.Context, userID uuid.UUID) ([]entity.Music, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicsByUserID", ctx, userID)
	ret0, _ := ret[0].([]entity.Music)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicsByUserID indicates an expected call of GetMusicsByUserID.
func (mr *MockEntityRepositoryMockRecorder) GetMusicsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicsByUserID", reflect.TypeOf((*MockEntityRepository)(nil).GetMusicsByUserID), ctx, userID)
}

// GetUserByID mocks base method.
func (m *MockEntityRepository) GetUserByID(ctx context.Context, userID uuid.UUID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockEntityRepositoryMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockEntityRepository)(nil).GetUserByID), ctx, userID)
}

// GetUserByIDs mocks base method.
func (m *MockEntityRepository) GetUserByIDs(ctx context.Context, userIDs []uuid.UUID) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIDs", ctx, userIDs)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIDs indicates an expected call of GetUserByIDs.
func (mr *MockEntityRepositoryMockRecorder) GetUserByIDs(ctx, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIDs", reflect.TypeOf((*MockEntityRepository)(nil).GetUserByIDs), ctx, userIDs)
}

// GetUserByName mocks base method.
func (m *MockEntityRepository) GetUserByName(ctx context.Context, userName string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, userName)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockEntityRepositoryMockRecorder) GetUserByName(ctx, userName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockEntityRepository)(nil).GetUserByName), ctx, userName)
}

// HardDeleteMusic mocks base method.
func (m *MockEntityRepository) HardDeleteMusic(ctx context.Context, music entity.Music) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteMusic", ctx, music)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteMusic indicates an expected call of HardDeleteMusic.
func (mr *MockEntityRepositoryMockRecorder) HardDeleteMusic(ctx, music any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteMusic", reflect.TypeOf((*MockEntityRepository)(nil).HardDeleteMusic), ctx, music)
}

// Transaction mocks base method.
func (m *MockEntityRepository) Transaction(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockEntityRepositoryMockRecorder) Transaction(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockEntityRepository)(nil).Transaction), ctx, f)
}

// UpdateAlbum mocks base method.
func (m *MockEntityRepository) UpdateAlbum(ctx context.Context, a entity.Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlbum", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlbum indicates an expected call of UpdateAlbum.
func (mr *MockEntityRepositoryMockRecorder) UpdateAlbum(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlbum", reflect.TypeOf((*MockEntityRepository)(nil).UpdateAlbum), ctx, a)
}

// UpdateArtist mocks base method.
func (m *MockEntityRepository) UpdateArtist(ctx context.Context, a entity.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArtist", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArtist indicates an expected call of UpdateArtist.
func (mr *MockEntityRepositoryMockRecorder) UpdateArtist(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArtist", reflect.TypeOf((*MockEntityRepository)(nil).UpdateArtist), ctx, a)
}

// UpdateGenre mocks base method.
func (m *MockEntityRepository) UpdateGenre(ctx context.Context, g entity.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenre", ctx, g)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGenre indicates an expected call of UpdateGenre.
func (mr *MockEntityRepositoryMockRecorder) UpdateGenre(ctx, g any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenre", reflect.TypeOf((*MockEntityRepository)(nil).UpdateGenre), ctx, g)
}

// UpdateMusic mocks base method.
func (m_2 *MockEntityRepository) UpdateMusic(ctx context.Context, m entity.Music) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateMusic", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMusic indicates an expected call of UpdateMusic.
func (mr *MockEntityRepositoryMockRecorder) UpdateMusic(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMusic", reflect.TypeOf((*MockEntityRepository)(nil).UpdateMusic), ctx, m)
}

// UpdateMusicStatus mocks base method.
func (m *MockEntityRepository) UpdateMusicStatus(ctx context.Context, musicID uuid.UUID, status entity.MusicStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMusicStatus", ctx, musicID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMusicStatus indicates an expected call of UpdateMusicStatus.
func (mr *MockEntityRepositoryMockRecorder) UpdateMusicStatus(ctx, musicID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMusicStatus", reflect.TypeOf((*MockEntityRepository)(nil).UpdateMusicStatus), ctx, musicID, status)
}

// UpdateMusicStatuses mocks base method.
func (m *MockEntityRepository) UpdateMusicStatuses(ctx context.Context, musicIDs []uuid.UUID, status entity.MusicStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMusicStatuses", ctx, musicIDs, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMusicStatuses indicates an expected call of UpdateMusicStatuses.
func (mr *MockEntityRepositoryMockRecorder) UpdateMusicStatuses(ctx, musicIDs, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMusicStatuses", reflect.TypeOf((*MockEntityRepository)(nil).UpdateMusicStatuses), ctx, musicIDs, status)
}

// UpdateUser mocks base method.
func (m *MockEntityRepository) UpdateUser(ctx context.Context, u entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockEntityRepositoryMockRecorder) UpdateUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockEntityRepository)(nil).UpdateUser), ctx, u)
}

// MockmusicRepository is a mock of musicRepository interface.
type MockmusicRepository struct {
	ctrl     *gomock.Controller
	recorder *MockmusicRepositoryMockRecorder
	isgomock struct{}
}

// MockmusicRepositoryMockRecorder is the mock recorder for MockmusicRepository.
type MockmusicRepositoryMockRecorder struct {
	mock *MockmusicRepository
}

// NewMockmusicRepository creates a new mock instance.
func NewMockmusicRepository(ctrl *gomock.Controller) *MockmusicRepository {
	mock := &MockmusicRepository{ctrl: ctrl}
	mock.recorder = &MockmusicRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmusicRepository) EXPECT() *MockmusicRepositoryMockRecorder {
	return m.recorder
}

// CreateMusic mocks base method.
func (m_2 *MockmusicRepository) CreateMusic(ctx context.Context, m entity.Music) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateMusic", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMusic indicates an expected call of CreateMusic.
func (mr *MockmusicRepositoryMockRecorder) CreateMusic(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMusic", reflect.TypeOf((*MockmusicRepository)(nil).CreateMusic), ctx, m)
}

// DeleteMusics mocks base method.
func (m *MockmusicRepository) DeleteMusics(ctx context.Context, musicIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMusics", ctx, musicIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMusics indicates an expected call of DeleteMusics.
func (mr *MockmusicRepositoryMockRecorder) DeleteMusics(ctx, musicIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMusics", reflect.TypeOf((*MockmusicRepository)(nil).DeleteMusics), ctx, musicIDs)
}

// GetMusicByFileHash mocks base method.
func (m_2 *MockmusicRepository) GetMusicByFileHash(ctx context.Context, userID uuid.UUID, fileHash string, m *entity.Music) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GetMusicByFileHash", ctx, userID, fileHash, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMusicByFileHash indicates an expected call of GetMusicByFileHash.
func (mr *MockmusicRepositoryMockRecorder) GetMusicByFileHash(ctx, userID, fileHash, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicByFileHash", reflect.TypeOf((*MockmusicRepository)(nil).GetMusicByFileHash), ctx, userID, fileHash, m)
}

// GetMusicByID mocks base method.
func (m *MockmusicRepository) GetMusicByID(ctx context.Context, id uuid.UUID) (entity.Music, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicByID", ctx, id)
	ret0, _ := ret[0].(entity.Music)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicByID indicates an expected call of GetMusicByID.
func (mr *MockmusicRepositoryMockRecorder) GetMusicByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicByID", reflect.TypeOf((*MockmusicRepository)(nil).GetMusicByID), ctx, id)
}

// GetMusicByIDs mocks base method.
func (m *MockmusicRepository) GetMusicByIDs(ctx context.Context, ids []uuid.UUID) ([]entity.Music, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicByIDs", ctx, ids)
	ret0, _ := ret[0].([]entity.Music)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicByIDs indicates an expected call of GetMusicByIDs.
func (mr *MockmusicRepositoryMockRecorder) GetMusicByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicByIDs", reflect.TypeOf((*MockmusicRepository)(nil).GetMusicByIDs), ctx, ids)
}

// GetMusicIDsByUserID mocks base method.
func (m *MockmusicRepository) GetMusicIDsByUserID(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicIDsByUserID", ctx, userID)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicIDsByUserID indicates an expected call of GetMusicIDsByUserID.
func (mr *MockmusicRepositoryMockRecorder) GetMusicIDsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicIDsByUserID", reflect.TypeOf((*MockmusicRepository)(nil).GetMusicIDsByUserID), ctx, userID)
}

// GetMusicsByUserID mocks base method.
func (m *MockmusicRepository) GetMusicsByUserID(ctx context.Context, userID uuid.UUID) ([]entity.Music, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicsByUserID", ctx, userID)
	ret0, _ := ret[0].([]entity.Music)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicsByUserID indicates an expected call of GetMusicsByUserID.
func (mr *MockmusicRepositoryMockRecorder) GetMusicsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicsByUserID", reflect.TypeOf((*MockmusicRepository)(nil).GetMusicsByUserID), ctx, userID)
}

// HardDeleteMusic mocks base method.
func (m *MockmusicRepository) HardDeleteMusic(ctx context.Context, music entity.Music) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteMusic", ctx, music)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteMusic indicates an expected call of HardDeleteMusic.
func (mr *MockmusicRepositoryMockRecorder) HardDeleteMusic(ctx, music any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteMusic", reflect.TypeOf((*MockmusicRepository)(nil).HardDeleteMusic), ctx, music)
}

// UpdateMusic mocks base method.
func (m_2 *MockmusicRepository) UpdateMusic(ctx context.Context, m entity.Music) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateMusic", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMusic indicates an expected call of UpdateMusic.
func (mr *MockmusicRepositoryMockRecorder) UpdateMusic(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMusic", reflect.TypeOf((*MockmusicRepository)(nil).UpdateMusic), ctx, m)
}

// UpdateMusicStatus mocks base method.
func (m *MockmusicRepository) UpdateMusicStatus(ctx context.Context, musicID uuid.UUID, status entity.MusicStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMusicStatus", ctx, musicID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMusicStatus indicates an expected call of UpdateMusicStatus.
func (mr *MockmusicRepositoryMockRecorder) UpdateMusicStatus(ctx, musicID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMusicStatus", reflect.TypeOf((*MockmusicRepository)(nil).UpdateMusicStatus), ctx, musicID, status)
}

// UpdateMusicStatuses mocks base method.
func (m *MockmusicRepository) UpdateMusicStatuses(ctx context.Context, musicIDs []uuid.UUID, status entity.MusicStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMusicStatuses", ctx, musicIDs, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMusicStatuses indicates an expected call of UpdateMusicStatuses.
func (mr *MockmusicRepositoryMockRecorder) UpdateMusicStatuses(ctx, musicIDs, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMusicStatuses", reflect.TypeOf((*MockmusicRepository)(nil).UpdateMusicStatuses), ctx, musicIDs, status)
}

// MockuserRepository is a mock of userRepository interface.
type MockuserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepositoryMockRecorder
	isgomock struct{}
}

// MockuserRepositoryMockRecorder is the mock recorder for MockuserRepository.
type MockuserRepositoryMockRecorder struct {
	mock *MockuserRepository
}

// NewMockuserRepository creates a new mock instance.
func NewMockuserRepository(ctrl *gomock.Controller) *MockuserRepository {
	mock := &MockuserRepository{ctrl: ctrl}
	mock.recorder = &MockuserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepository) EXPECT() *MockuserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockuserRepository) CreateUser(ctx context.Context, u entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockuserRepositoryMockRecorder) CreateUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockuserRepository)(nil).CreateUser), ctx, u)
}

// DeleteUser mocks base method.
func (m *MockuserRepository) DeleteUser(ctx context.Context, u entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockuserRepositoryMockRecorder) DeleteUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockuserRepository)(nil).DeleteUser), ctx, u)
}

// GetUserByID mocks base method.
func (m *MockuserRepository) GetUserByID(ctx context.Context, userID uuid.UUID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockuserRepositoryMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockuserRepository)(nil).GetUserByID), ctx, userID)
}

// GetUserByIDs mocks base method.
func (m *MockuserRepository) GetUserByIDs(ctx context.Context, userIDs []uuid.UUID) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIDs", ctx, userIDs)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIDs indicates an expected call of GetUserByIDs.
func (mr *MockuserRepositoryMockRecorder) GetUserByIDs(ctx, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIDs", reflect.TypeOf((*MockuserRepository)(nil).GetUserByIDs), ctx, userIDs)
}

// GetUserByName mocks base method.
func (m *MockuserRepository) GetUserByName(ctx context.Context, userName string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, userName)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockuserRepositoryMockRecorder) GetUserByName(ctx, userName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockuserRepository)(nil).GetUserByName), ctx, userName)
}

// UpdateUser mocks base method.
func (m *MockuserRepository) UpdateUser(ctx context.Context, u entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockuserRepositoryMockRecorder) UpdateUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockuserRepository)(nil).UpdateUser), ctx, u)
}

// MockartistRepository is a mock of artistRepository interface.
type MockartistRepository struct {
	ctrl     *gomock.Controller
	recorder *MockartistRepositoryMockRecorder
	isgomock struct{}
}

// MockartistRepositoryMockRecorder is the mock recorder for MockartistRepository.
type MockartistRepositoryMockRecorder struct {
	mock *MockartistRepository
}

// NewMockartistRepository creates a new mock instance.
func NewMockartistRepository(ctrl *gomock.Controller) *MockartistRepository {
	mock := &MockartistRepository{ctrl: ctrl}
	mock.recorder = &MockartistRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockartistRepository) EXPECT() *MockartistRepositoryMockRecorder {
	return m.recorder
}

// CreateArtist mocks base method.
func (m *MockartistRepository) CreateArtist(ctx context.Context, a entity.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArtist", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateArtist indicates an expected call of CreateArtist.
func (mr *MockartistRepositoryMockRecorder) CreateArtist(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArtist", reflect.TypeOf((*MockartistRepository)(nil).CreateArtist), ctx, a)
}

// DeleteArtist mocks base method.
func (m *MockartistRepository) DeleteArtist(ctx context.Context, a entity.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtist", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtist indicates an expected call of DeleteArtist.
func (mr *MockartistRepositoryMockRecorder) DeleteArtist(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtist", reflect.TypeOf((*MockartistRepository)(nil).DeleteArtist), ctx, a)
}

// GetArtistByID mocks base method.
func (m *MockartistRepository) GetArtistByID(ctx context.Context, id uuid.UUID) (entity.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByID", ctx, id)
	ret0, _ := ret[0].(entity.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByID indicates an expected call of GetArtistByID.
func (mr *MockartistRepositoryMockRecorder) GetArtistByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByID", reflect.TypeOf((*MockartistRepository)(nil).GetArtistByID), ctx, id)
}

// GetArtistByIDs mocks base method.
func (m *MockartistRepository) GetArtistByIDs(ctx context.Context, ids []uuid.UUID) ([]entity.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByIDs", ctx, ids)
	ret0, _ := ret[0].([]entity.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByIDs indicates an expected call of GetArtistByIDs.
func (mr *MockartistRepositoryMockRecorder) GetArtistByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByIDs", reflect.TypeOf((*MockartistRepository)(nil).GetArtistByIDs), ctx, ids)
}

// GetArtistByName mocks base method.
func (m *MockartistRepository) GetArtistByName(ctx context.Context, ownerID uuid.UUID, name string) (entity.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByName", ctx, ownerID, name)
	ret0, _ := ret[0].(entity.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByName indicates an expected call of GetArtistByName.
func (mr *MockartistRepositoryMockRecorder) GetArtistByName(ctx, ownerID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByName", reflect.TypeOf((*MockartistRepository)(nil).GetArtistByName), ctx, ownerID, name)
}

// UpdateArtist mocks base method.
func (m *MockartistRepository) UpdateArtist(ctx context.Context, a entity.Artist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArtist", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArtist indicates an expected call of UpdateArtist.
func (mr *MockartistRepositoryMockRecorder) UpdateArtist(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArtist", reflect.TypeOf((*MockartistRepository)(nil).UpdateArtist), ctx, a)
}

// MockgenericRepository is a mock of genericRepository interface.
type MockgenericRepository struct {
	ctrl     *gomock.Controller
	recorder *MockgenericRepositoryMockRecorder
	isgomock struct{}
}

// MockgenericRepositoryMockRecorder is the mock recorder for MockgenericRepository.
type MockgenericRepositoryMockRecorder struct {
	mock *MockgenericRepository
}

// NewMockgenericRepository creates a new mock instance.
func NewMockgenericRepository(ctrl *gomock.Controller) *MockgenericRepository {
	mock := &MockgenericRepository{ctrl: ctrl}
	mock.recorder = &MockgenericRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgenericRepository) EXPECT() *MockgenericRepositoryMockRecorder {
	return m.recorder
}

// CreateGenre mocks base method.
func (m *MockgenericRepository) CreateGenre(ctx context.Context, g entity.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenre", ctx, g)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGenre indicates an expected call of CreateGenre.
func (mr *MockgenericRepositoryMockRecorder) CreateGenre(ctx, g any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockgenericRepository)(nil).CreateGenre), ctx, g)
}

// DeleteGenre mocks base method.
func (m *MockgenericRepository) DeleteGenre(ctx context.Context, g entity.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGenre", ctx, g)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGenre indicates an expected call of DeleteGenre.
func (mr *MockgenericRepositoryMockRecorder) DeleteGenre(ctx, g any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGenre", reflect.TypeOf((*MockgenericRepository)(nil).DeleteGenre), ctx, g)
}

// GetGenreByID mocks base method.
func (m *MockgenericRepository) GetGenreByID(ctx context.Context, id uuid.UUID) (entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenreByID", ctx, id)
	ret0, _ := ret[0].(entity.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenreByID indicates an expected call of GetGenreByID.
func (mr *MockgenericRepositoryMockRecorder) GetGenreByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenreByID", reflect.TypeOf((*MockgenericRepository)(nil).GetGenreByID), ctx, id)
}

// GetGenreByIDs mocks base method.
func (m *MockgenericRepository) GetGenreByIDs(ctx context.Context, ids []uuid.UUID) ([]entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenreByIDs", ctx, ids)
	ret0, _ := ret[0].([]entity.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenreByIDs indicates an expected call of GetGenreByIDs.
func (mr *MockgenericRepositoryMockRecorder) GetGenreByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenreByIDs", reflect.TypeOf((*MockgenericRepository)(nil).GetGenreByIDs), ctx, ids)
}

// GetGenreByName mocks base method.
func (m *MockgenericRepository) GetGenreByName(ctx context.Context, ownerID uuid.UUID, name string) (entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenreByName", ctx, ownerID, name)
	ret0, _ := ret[0].(entity.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenreByName indicates an expected call of GetGenreByName.
func (mr *MockgenericRepositoryMockRecorder) GetGenreByName(ctx, ownerID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenreByName", reflect.TypeOf((*MockgenericRepository)(nil).GetGenreByName), ctx, ownerID, name)
}

// UpdateGenre mocks base method.
func (m *MockgenericRepository) UpdateGenre(ctx context.Context, g entity.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenre", ctx, g)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGenre indicates an expected call of UpdateGenre.
func (mr *MockgenericRepositoryMockRecorder) UpdateGenre(ctx, g any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenre", reflect.TypeOf((*MockgenericRepository)(nil).UpdateGenre), ctx, g)
}

// MockalbumRepository is a mock of albumRepository interface.
type MockalbumRepository struct {
	ctrl     *gomock.Controller
	recorder *MockalbumRepositoryMockRecorder
	isgomock struct{}
}

// MockalbumRepositoryMockRecorder is the mock recorder for MockalbumRepository.
type MockalbumRepositoryMockRecorder struct {
	mock *MockalbumRepository
}

// NewMockalbumRepository creates a new mock instance.
func NewMockalbumRepository(ctrl *gomock.Controller) *MockalbumRepository {
	mock := &MockalbumRepository{ctrl: ctrl}
	mock.recorder = &MockalbumRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockalbumRepository) EXPECT() *MockalbumRepositoryMockRecorder {
	return m.recorder
}

// CreateAlbum mocks base method.
func (m *MockalbumRepository) CreateAlbum(ctx context.Context, a entity.Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlbum", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAlbum indicates an expected call of CreateAlbum.
func (mr *MockalbumRepositoryMockRecorder) CreateAlbum(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlbum", reflect.TypeOf((*MockalbumRepository)(nil).CreateAlbum), ctx, a)
}

// DeleteAlbums mocks base method.
func (m *MockalbumRepository) DeleteAlbums(ctx context.Context, a []entity.Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlbums", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlbums indicates an expected call of DeleteAlbums.
func (mr *MockalbumRepositoryMockRecorder) DeleteAlbums(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlbums", reflect.TypeOf((*MockalbumRepository)(nil).DeleteAlbums), ctx, a)
}

// GetAlbumByID mocks base method.
func (m *MockalbumRepository) GetAlbumByID(ctx context.Context, id uuid.UUID) (entity.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumByID", ctx, id)
	ret0, _ := ret[0].(entity.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumByID indicates an expected call of GetAlbumByID.
func (mr *MockalbumRepositoryMockRecorder) GetAlbumByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumByID", reflect.TypeOf((*MockalbumRepository)(nil).GetAlbumByID), ctx, id)
}

// GetAlbumByIDs mocks base method.
func (m *MockalbumRepository) GetAlbumByIDs(ctx context.Context, ids []uuid.UUID) ([]entity.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumByIDs", ctx, ids)
	ret0, _ := ret[0].([]entity.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumByIDs indicates an expected call of GetAlbumByIDs.
func (mr *MockalbumRepositoryMockRecorder) GetAlbumByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumByIDs", reflect.TypeOf((*MockalbumRepository)(nil).GetAlbumByIDs), ctx, ids)
}

// GetAlbumsByNameAndArtist mocks base method.
func (m *MockalbumRepository) GetAlbumsByNameAndArtist(ctx context.Context, ownerID uuid.UUID, albumName string, artist entity.Artist) ([]entity.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumsByNameAndArtist", ctx, ownerID, albumName, artist)
	ret0, _ := ret[0].([]entity.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsByNameAndArtist indicates an expected call of GetAlbumsByNameAndArtist.
func (mr *MockalbumRepositoryMockRecorder) GetAlbumsByNameAndArtist(ctx, ownerID, albumName, artist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsByNameAndArtist", reflect.TypeOf((*MockalbumRepository)(nil).GetAlbumsByNameAndArtist), ctx, ownerID, albumName, artist)
}

// UpdateAlbum mocks base method.
func (m *MockalbumRepository) UpdateAlbum(ctx context.Context, a entity.Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlbum", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlbum indicates an expected call of UpdateAlbum.
func (mr *MockalbumRepositoryMockRecorder) UpdateAlbum(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlbum", reflect.TypeOf((*MockalbumRepository)(nil).UpdateAlbum), ctx, a)
}

// MockObjectStorage is a mock of ObjectStorage interface.
type MockObjectStorage struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageMockRecorder
	isgomock struct{}
}

// MockObjectStorageMockRecorder is the mock recorder for MockObjectStorage.
type MockObjectStorageMockRecorder struct {
	mock *MockObjectStorage
}

// NewMockObjectStorage creates a new mock instance.
func NewMockObjectStorage(ctrl *gomock.Controller) *MockObjectStorage {
	mock := &MockObjectStorage{ctrl: ctrl}
	mock.recorder = &MockObjectStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorage) EXPECT() *MockObjectStorageMockRecorder {
	return m.recorder
}

// DeleteObject mocks base method.
func (m *MockObjectStorage) DeleteObject(ctx context.Context, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockObjectStorageMockRecorder) DeleteObject(ctx, objectName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockObjectStorage)(nil).DeleteObject), ctx, objectName)
}

// GetObject mocks base method.
func (m *MockObjectStorage) GetObject(ctx context.Context, objectName string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, objectName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockObjectStorageMockRecorder) GetObject(ctx, objectName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockObjectStorage)(nil).GetObject), ctx, objectName)
}

// GetObjectURL mocks base method.
func (m *MockObjectStorage) GetObjectURL(ctx context.Context, objectName, cacheControl string) (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectURL", ctx, objectName, cacheControl)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectURL indicates an expected call of GetObjectURL.
func (mr *MockObjectStorageMockRecorder) GetObjectURL(ctx, objectName, cacheControl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectURL", reflect.TypeOf((*MockObjectStorage)(nil).GetObjectURL), ctx, objectName, cacheControl)
}

// UploadObject mocks base method.
func (m *MockObjectStorage) UploadObject(ctx context.Context, objectName string, data io.Reader, size int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadObject", ctx, objectName, data, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadObject indicates an expected call of UploadObject.
func (mr *MockObjectStorageMockRecorder) UploadObject(ctx, objectName, data, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadObject", reflect.TypeOf((*MockObjectStorage)(nil).UploadObject), ctx, objectName, data, size)
}

// MockMetadataReader is a mock of MetadataReader interface.
type MockMetadataReader struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataReaderMockRecorder
	isgomock struct{}
}

// MockMetadataReaderMockRecorder is the mock recorder for MockMetadataReader.
type MockMetadataReaderMockRecorder struct {
	mock *MockMetadataReader
}

// NewMockMetadataReader creates a new mock instance.
func NewMockMetadataReader(ctrl *gomock.Controller) *MockMetadataReader {
	mock := &MockMetadataReader{ctrl: ctrl}
	mock.recorder = &MockMetadataReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataReader) EXPECT() *MockMetadataReaderMockRecorder {
	return m.recorder
}

// GetMetadata mocks base method.
func (m *MockMetadataReader) GetMetadata(ctx context.Context, path string) (entity.RawMusicMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", ctx, path)
	ret0, _ := ret[0].(entity.RawMusicMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockMetadataReaderMockRecorder) GetMetadata(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockMetadataReader)(nil).GetMetadata), ctx, path)
}
